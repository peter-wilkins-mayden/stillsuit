# I don't love yaml, but it's a little easier to format GraphQL in here than in Clojure source
# This file contains some test queries that can be accessed by the (load-setup) and
# (execute-query) test routines. If a query has an associated :response key, that will
# be parsed as EDN and compared to the actual query output via the (verify-queries!)
# test function.
all_artists:
  query: |-
    {
      all_artists {
        name
        id
      }
    }
  response: |-
    {:data
     {:all_artists
      [{:name "Crass", :id "1"}
       {:name "Subhumans", :id "10"}]}}

artist_by_id:
  query: |-
    {
      artist_by_id(id: "1") {
        name
        id
      }
    }
  response: |-
    {:data
     {:artist_by_id
      {:name "Crass", :id "1"}}}

artist_by_id_nil:
  query: |-
    {
      artist_by_id(id: "666") {
        name
        id
      }
    }
  response: |-
    {:data {:artist_by_id nil}}

artist_by_id_traverse:
  query: |-
    {
      artist_by_id(id: "1") {
        albums {
          name
          year
        }
      }
    }
  # TODO: the albums list comes across in hash-map order; needs to be stable
  response: |-
    {:data {:artist_by_id {:albums [{:year 1977 :name "The Feeding of the 5000"}
                                    {:year 1979 :name "Stations of the Crass"}]}}}

album_by_id:
  query: |-
    {
      album_by_id(id: "2") {
        name
        id
      }
    }
  response: |-
    {:data {:album_by_id {:name "The Feeding of the 5000" :id "2"}}}

album_backref:
  query: |-
    {
      album_by_id(id: "2") {
        artist {
          name
          id
        }
      }
    }
  response: |-
    {:data {:album_by_id {:artist {:name "Crass" :id "1"}}}}

album_filter:
  query: |-
    {
      album_by_id(id: "2") {
        first {
          position
          name
        }
      }
    }
  response: |-
    {:data {:album_by_id {:first {:position 1 :name "Asylum"}}}}
